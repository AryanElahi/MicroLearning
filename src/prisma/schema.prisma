generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                        @id @default(autoincrement())
  firstName    String                     @default("")
  lastName     String                     @default("")
  phone        String                     @unique
  countryCode  String                     @default("")
  password     String                     @default("")
  refreshToken String                     @default("")
  blocked      Boolean                    @default(false)
  softDelete   Boolean                    @default(false)
  address      String                     @default("")
  classes      Class[]
  enrolled     EnrolledCoursebyEachUser[]
}

model Admin {
  id           Int      @id @default(autoincrement())
  firstName    String   @default("")
  lastName     String   @default("")
  userName     String   @unique
  role         String   @default("")
  password     String   @default("")
  refreshToken String   @default("")
  softDelete   Boolean  @default(false)
  permissions  Json     @db.JsonB
  classes      Class[]
  courses      Course[]
}

model Class {
  id        Int                        @id @default(autoincrement())
  course    Course                     @relation(fields: [courseID], references: [id])
  courseID  Int
  mentor    Admin                      @relation(fields: [mentorID], references: [id])
  mentorID  Int
  student   User                       @relation(fields: [studetID], references: [id])
  studetID  Int
  title     String                     @default("")
  startTime String                     @default("")
  isLocked  Boolean                    @default(false)
  capasity  Int                        @default(0)
  mentors   String[]                   @default([])
  students  String[]                   @default([])
  enrolled  EnrolledCoursebyEachUser[]
}

model Course {
  id               Int                        @id @default(autoincrement())
  Teacher          Admin                      @relation(fields: [TeacherID], references: [id])
  TeacherID        Int
  title            String
  deadlineDuration DateTime
  description      String
  rate             Int
  taskcount        Int
  isLocked         Boolean
  enrolledpeople   String[]
  seasions         String[]
  seasion          seasion?                   @relation("course ID")
  class            Class[]
  chapter          chapter[]
  task             task[]
}

model seasion {
  id        Int       @id @default(autoincrement())
  course    Course?   @relation(name: "course ID", fields: [courseID], references: [id])
  courseID  Int       @unique
  title     String
  priority  Int
  chapters  String[]
  chapter   chapter[]
}

model EnrolledCoursebyEachUser {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userID], references: [id])
  userID    Int
  class     Class  @relation(fields: [classID], references: [id])
  classID   Int
  mark      Int    @default(0)
  progress  Float  @default(0.0)
  startTime DateTime
  endTime   DateTime
  quizes    Json   @db.JsonB
  done      Json   @db.JsonB
}

model chapter {
  id        Int      @id @default(autoincrement())
  seasion   seasion  @relation(fields: [seasionID], references: [id])
  seasionID Int
  course    Course   @relation(fields: [courseID], references: [id])
  courseID  Int
  title     String   @default("")
  priority  Int      @default(0)
  examID    String   @default("")
  tasks     String[] @default([])
  chapterID task?    @relation("chapterID")
}

model task {
  id          Int       @id @default(autoincrement())
  chapter     chapter?  @relation(name: "chapterID", fields: [chpterID], references: [id])
  chpterID    Int       @unique
  course      Course    @relation(fields: [courseID], references: [id])
  courseID    Int
  title       String    @default("")
  priority    Int       @default(0)
  description String    @default("")
}

model Quize {
  id   Int    @id @default(autoincrement())
  row1 String @default("")
  row2 String @default("")
  row3 String @default("")
}

model test {
  id   Int    @id @default(autoincrement())
  name String @default("")
}
