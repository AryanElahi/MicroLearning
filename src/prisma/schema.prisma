generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int               @id @default(autoincrement())
  firstName    String            @default("")
  lastName     String            @default("")
  phone        String            @unique
  countryCode  String            @default("")
  password     String            @default("")
  refreshToken String            @default("")
  blocked      Boolean           @default(false)
  softDelete   Boolean           @default(false)
  address      String            @default("")
  classes      studentsOnClass[]
}

model Admin {
  id           Int      @id @default(autoincrement()) @unique
  firstName    String   @default("")
  lastName     String   @default("")
  userName     String   @unique
  role         String   @default("")
  password     String   @default("")
  refreshToken String   @default("")
  softDelete   Boolean  @default(false)
  permissions  Json     @db.JsonB
  classes      Class[]
  courses      Course[]
}

model Class {
  id        Int               @id @default(autoincrement())
  course    Course            @relation(fields: [courseID], references: [id])
  courseID  Int
  mentor    Admin             @relation(fields: [mentorID], references: [id])
  mentorID  Int
  title     DateTime
  startTime DateTime
  isLocked  Boolean           @default(false)
  capasity  Int               @default(0)
  students  studentsOnClass[]
}

model Course {
  id               Int      @id @default(autoincrement())
  name             String   @default("")
  teacher          Admin    @relation(fields: [teacherID], references: [id])
  teacherID        Int
  title            String
  description      String
  //rate           Int?
  taskcount        Int?
  isLocked         Boolean  @default(false)
  seasons          season[]
  classes          Class[]
}

model season {
  id        Int       @id @default(autoincrement())
  course    Course   @relation(fields: [courseID], references: [id])
  courseID  Int      
  title     String
  priority  Int
  chapters  chapter[]
}

model studentsOnClass {
  id        Int      @id @default(autoincrement())
  student   User     @relation(fields: [userID], references: [id])
  userID    Int
  class     Class  @relation(fields: [classID], references: [id])
  classID   Int
  mark      Int    @default(0)
  progress  Float  @default(0.0)
  startTime DateTime 
  endTime   DateTime
  quizes    Json   @db.JsonB
  done      Json   @db.JsonB
}

model chapter {
  id        Int      @id @default(autoincrement())
  season   season  @relation(fields: [seasonID], references: [id])
  seasonID Int
  title     String   @default("")
  priority  Int      @default(0)
  tasks     task[]
}

model task {
  id          Int       @id @default(autoincrement())
  chapter     chapter   @relation(fields: [chpterID], references: [id])
  chpterID    Int      
  title       String    @default("")
  priority    Int       @default(0)
  description String    @default("")
}

//model Quize {
//  id   Int    @id @default(autoincrement())
//  row1 String @default("")
//  row2 String @default("")
//  row3 String @default("")
//}

//model test {
//  id   Int    @id @default(autoincrement())
//  name String @default("")
//}
